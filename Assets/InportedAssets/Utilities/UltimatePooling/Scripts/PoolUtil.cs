using UnityEngine;
using System;
using Object = UnityEngine.Object;

namespace UltimatePooling
{
    /// <summary>
    /// The amount of detail to include in logged messages.
    /// </summary>
    public enum LogLevel
    {
        /// <summary>
        /// Dont log anything to the console.
        /// </summary>
        None = 0,
        /// <summary>
        /// Only log error messages to the console.
        /// </summary>
        Error = 1,
        /// <summary>
        /// Log errors and warnings to the console.
        /// </summary>
        Warning = 2,
        /// <summary>
        /// Log all message types to the console, including errors and warnings.
        /// </summary>
        Message = 3,
    }

    /// <summary>
    /// Helper class used by UltimatePooling to provide additional functionality.
    /// </summary>
    internal static class PoolUtil
    { 
        // Private
        private static string prefabError = "The thing you want to spawn is null"; // Similar to Unity

        // Methods
        /// <summary>
        /// Validate that a reference to a prefab object is valid or throw an exception.
        /// The exception message is similar to the message generated by Unity when you attempt to Instantiate from null.
        /// </summary>
        /// <param name="reference">The object to test</param>
        public static void validatePrefab(Object reference)
        {
            // Check for valid reference
            if (reference == null)
            {
                // Raise an exception
                throw new UnityException(prefabError);
            }
        }

        /// <summary>
        /// Validate that a reference to a class instance is valid or throw an exception.
        /// </summary>
        /// <param name="arg">The argument to test</param>
        /// <param name="name">The name of the parameter</param>
        public static void validateReference(object arg, string name)
        {
            // Check for valid reference
            if (arg == null)
            {
                // Raise an exception   
                throw new ArgumentNullException(name, string.Format("Argument '{0}' cannot be null", name));
            }
        }

        /// <summary>
        /// Called by the pool group when a new instance must be allocated. (The pool is empty) 
        /// </summary>
        /// <param name="prefab">The prefab to instantiate</param>
        /// <param name="position">The position to spawn at</param>
        /// <param name="rotation">The rotation to spawn with</param>
        /// <param name="parent">The parent object to attached the result to</param>
        /// <param name="initialState">The initial enabled state of the object</param>
        /// <returns>A new instance of the specified dprefab</returns>
        public static Object instantiate(Object prefab, Vector3 position, Quaternion rotation, Transform parent = null, bool initialState = true)
        {
            validatePrefab(prefab);

            // Unity call to instantiate
            Object instance = Object.Instantiate(prefab, position, rotation);
            GameObject go = null;

            if (instance is GameObject)
            {
                // Get the object
                go = instance as GameObject;
            }
            else if (instance is Component)
            {
                // Get the parent object for the component
                go = (instance as Component).gameObject;
            }

            // Set state
            if (go != null)
            {
                // Set active
                go.SetActive(initialState);

                // Check for parenting
                if (parent != null)
                {
                    // Add as child
                    go.transform.SetParent(parent);
                }
            }

            return go;
        }

        /// <summary>
        /// Called by the pool group when a instance can be released to limit memory usage.
        /// </summary>
        /// <param name="instance">The instance to destroy</param>
        public static void destroy(Object instance)
        {
            validateReference(instance, "instance");

            // Unity call to destroy
            Object.Destroy(instance);
        }

        public static void log(string msg)
        {
            if(UltimatePool.logLevel >= LogLevel.Message)
                Debug.Log(msg);
        }

        public static void logWarning(string msg)
        {
            if(UltimatePool.logLevel >= LogLevel.Warning)
                Debug.LogWarning(msg);
        }

        public static void logError(string msg)
        {
            if(UltimatePool.logLevel >= LogLevel.Error)
                Debug.LogError(msg);
        }
    }
}
